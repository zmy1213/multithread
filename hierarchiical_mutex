#include<iostream>
#include<thread>
#include<mutex>
using namespace std;
class hierarchical_mutex
{
	mutex internal_mutex;
	unsigned long const hierarchical_value;
	unsigned long previous_hierarchy_value;

	static thread_local unsigned long this_thread_hierarchy_value;
	void check_for_hierarchy_violation()
	{
		if (this_thread_hierarchy_value <= hierarchical_value)
		{
			throw logic_error("mutex hierarchy violated");
		}
	}
	void update_hierchy_value()
	{
		previous_hierarchy_value = this_thread_hierarchy_value;
		this_thread_hierarchy_value = hierarchical_value;
	}
public:
	explicit hierarchical_mutex(unsigned long value):hierarchical_value(value),previous_hierarchy_value(0)
	{

	}
	void lock()
	{
		check_for_hierarchy_violation();
		internal_mutex.lock();
		update_hierchy_value();
	}
	void unlock()
	{
		this_thread_hierarchy_value = previous_hierarchy_value;
		internal_mutex.unlock();
	}
	bool try_lock()
	{
		check_for_hierarchy_violation();
		if (!internal_mutex.try_lock())
		{
			return false;

		}
		update_hierchy_value();
		return true;
	}
};
thread_local unsigned long hierarchical_mutex::this_thread_hierarchy_value(ULONG_MAX);
